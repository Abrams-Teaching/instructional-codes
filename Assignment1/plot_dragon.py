'''
D R E X E L   U N I V E R S I T Y
CHE T580 Spring 2020-2021
Assignment 1 Template
The Harter-Heighway Dragon:  Plot module

DO NOT EDIT THIS SCRIPT!

Use it by invoking

python ./plot_dragon.py -i <filename>

where <filename> is output from hhd.c

Cameron F Abrams cfa22@drexel.edu
'''
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm
import numpy as np
import argparse

class vertex:
    def __init__(self,x=0,y=0,ln=''):
        self.x=x
        self.y=y
        if len(ln)>0:
            self.x,self.y = map(float,ln.split())

def make_2D_plot(S,fn='my_plot.png',color_map_name='viridis',axes=[],figsize=(8,8)):
    color_map=cm.get_cmap(color_map_name)
    fig, axs = plt.subplots(1, 1, figsize=figsize)
    if len(axes)==0: # autoscale and center
        xomax=max([p.x for p in S])
        xomin=min([p.x for p in S])
        yomax=max([p.y for p in S])
        yomin=min([p.y for p in S])
        xspan=xomax-xomin
        yspan=yomax-yomin
        xpad=xspan/10
        ypad=yspan/10
        xspan+=2*xpad
        yspan+=2*ypad
        xmax=xomax+xpad
        xmin=xomin-xpad
        ymax=yomax+ypad
        ymin=yomin-ypad
        if xspan>yspan:
            shft=(xmax-yomax)-0.5*(xmax-xmin-yomax+yomin)
            plt.xlim([xmin,xmax])
            plt.ylim([xmin,xmax])
        else: 
            shft=(ymax-xomax)-0.5*(ymax-ymin-xomax+xomin)
            plt.xlim([ymin-shft,ymax-shft])    
            plt.ylim([ymin,ymax])
    else:
        plt.xlim(axes[0])
        plt.ylim(axes[1])

    points = np.array([[s.x for s in S],[s.y for s in S]]).T.reshape(-1,1,2)
    segments = np.concatenate([points[:-1],points[1:]],axis=1)
    norm=plt.Normalize(0,len(S)-1)
    lc=LineCollection(segments,cmap=color_map_name,norm=norm)
    lc.set_array(np.arange(0,len(S)))
    axs.add_collection(lc)

    plt.axis('off')
    plt.savefig(fn, bbox_inches='tight')
    plt.close()

if __name__ == '__main__':
    parser=argparse.ArgumentParser()
    parser.add_argument('-i',metavar='<filename>',default='',help='name of file generated by hhd.c')
    parser.add_argument('-fn',metavar='<filename>',default='my_plot.png',help='name of output image file to generate')
    parser.add_argument('-cmn',metavar='<str>',default='viridis',help='colomap name')
    parser.add_argument('-figsize',metavar='<flt> <flt>',nargs=2,default=[8,8],help='figure size',type=float)

    args=parser.parse_args()

    try:
        with open(args.i) as f:
            V = [vertex(ln=l) for l in f]
        make_2D_plot(V,fn=args.fn,color_map_name=args.cmn,figsize=args.figsize)
    except FileNotFoundError as e:
        print('Whoops! '+str(e))
