# Plots columns generated by mdlj.c
# Cameron F Abrams cfa22@drexel.edu

import numpy as np
import matplotlib.pyplot as plt
import argparse as ap

def block ( A ):
    Ab=[]
    for i in range(len(A)//2):
        Ab.append(0.5*(A[2*i]+A[2*i-1]))
    return np.array(Ab)

def flyberg ( y, minblocks=4):
    c1n=[]
    c1m=[]
    c1s=[]
    j=0
    while (len(y)>minblocks):
        mn=y.mean()
        s2=y.var()
        av=np.sqrt(s2/(len(y)-1))
        sav=av/np.sqrt(2*(len(y)-1))
        print('{:d} {:.5f} {:.5f} {:.5f}'.format(j,mn,av,sav))
        c1n.append(j)
        c1m.append(mn)
        c1s.append(av)
        y=block(y)
        j+=1
    return c1n,c1m,c1s

parser=ap.ArgumentParser()
parser.add_argument("-l",default="log",type=str,help="log file")
parser.add_argument("-d",default='2',type=str,help="comma-separated-list of data columns to plot vs time")
parser.add_argument("-ylabel",default='energy ($\epsilon$)',type=str,help="y-axis label")
parser.add_argument("-o",default='out.png',type=str,help="output file name")
parser.add_argument("-N",default=1,type=int,help="number of particles")
parser.add_argument("-show-column-labels",default=True,action='store_true',help="show column labels")
parser.add_argument("-do-flyvberg",default=False,action='store_true',help="Do Flyvberg analysis")
args=parser.parse_args()

col_labels=[]
with open(args.l) as f:
    for l in f:
        tok=l.split()
        if tok[0]=="#LABELS":
            col_labels=tok[1:]
if args.show_column_labels:
    for i,c in enumerate(col_labels):
        print(i,c)
dat=np.loadtxt(args.l)
cols=list(map(int,args.d.split(',')))
x=dat[:,1]
y=[]
plot_labels=[]
for c in cols:
    y.append(dat[:,c])
    if len(col_labels)>0:
        plot_labels.append(col_labels[c])
    else:
        plot_labels.append('')

fig,ax=plt.subplots(1,1,figsize=(6,4))

for yy,l in zip(y,plot_labels):
    ax.plot(x,yy/args.N,label=l)
    if args.do_flyvberg:
        n,m,s=flyberg(yy/args.N)

if len(col_labels)>0:
    ax.set_xlabel(col_labels[1])
ax.set_ylabel(args.ylabel)
ax.legend()
plt.savefig(args.o,bbox_inches='tight')

